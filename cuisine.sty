%% This is file `cuisine.sty'
%%
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Identification section
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{cuisine}[2000/04/11 v0.00 recipe typesetting]
%
% Use the nicefrac package for "nice" fractions...
\RequirePackage{nicefrac}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Variables and counters etc.
%
% r@cipenumber   - Recipe number counter
%                  This could be made dependent on, say, section.
\newcounter{r@cipenumber}
%
% command to reset it
\DeclareRobustCommand{\ResetRecipeCounter}{%
  \setcounter{r@cipenumber}{0}%
}
%
% m@thodnumber   - Method counter (within recipes)
%                  It is zeroed whenever the recipe counter is incremented.
\newcounter{m@thodnumber}[r@cipenumber]  
%
% ingr@dnumber   - Ingredeient counter (within recipes)
%                  It is zeroed whenever the method counter is incremented.
\newcounter{ingr@dnumber}[m@thodnumber]  
%
% ifnumb@ring    - Whether or not recipe numbers are printed 
%                  Method numbers will always be printed    
\newif\ifnumb@ring
%
% ifind@xing     - Whether writing the recipes to an index file or not
\newif\ifind@xing
%
% ifh@smethodtext - Whether the method body is empty or not
\newif\ifh@smethodtext
\h@smethodtextfalse
%
% And some dimensions:
%
% Width of the recipe number box
\newlength{\R@cipeNumberWidth}
%
% Width of the recipe title box
\newlength{\R@cipeTitleWidth}
%
% Width of the recipe number-of-servings box
\newlength{\R@cipeServingsWidth}
%
% And the sum of the last two
\newlength{\R@cipeTandSWidth}
%
% Height of the recipe title to rule adjustments (usually negative)
\newlength{\R@cipeTitleVerticalAdjustTop}
\newlength{\R@cipeTitleVerticalAdjustBot}
%
% Width of the ingredients
\newlength{\R@cipeIngredientWidth}
\newlength{\R@cipeQuantityWidth}
\newlength{\R@cipeUnitsWidth}
\newlength{\R@cipeQandUWidth}   % total of the previous two...
\newlength{\R@cipeIQUWidth}   % total of the previous two...
%
% Width of the method text
\newlength{\R@cipeMethodWidth}
%
% Temporary parindent
\newlength{\R@cipeTempParindent}
%
% Relevant definitions for setting the above values:
%
%   #1 is the ingredient width, #2 the quantity, #3 the units
%   others calculated
\DeclareRobustCommand*{\RecipeMethodWidths}[3]{%
  \setlength{\R@cipeIngredientWidth}{#1}%
  \setlength{\R@cipeQuantityWidth}{#2}%
  \setlength{\R@cipeUnitsWidth}{#3}%
  \setlength{\R@cipeQandUWidth}{\R@cipeQuantityWidth}%
  \addtolength{\R@cipeQandUWidth}{\R@cipeUnitsWidth}%
  \setlength{\R@cipeIQUWidth}{\R@cipeQandUWidth}%
  \addtolength{\R@cipeIQUWidth}{\R@cipeIngredientWidth}%
  \setlength{\R@cipeMethodWidth}{\textwidth}
  \addtolength{\R@cipeMethodWidth}{-\R@cipeNumberWidth}%
  \addtolength{\R@cipeMethodWidth}{-\R@cipeIngredientWidth}%
  \addtolength{\R@cipeMethodWidth}{-\R@cipeQandUWidth}%
}
%
%   #1 is the recipe number width, #2 the number of servings
%   title width calculated, updates method widths too
\DeclareRobustCommand*{\RecipeTitleWidths}[2]{%
  \setlength{\R@cipeNumberWidth}{#1}%
  \setlength{\R@cipeServingsWidth}{#2}%
  \setlength{\R@cipeTitleWidth}{\textwidth}%
  \addtolength{\R@cipeTitleWidth}{-\R@cipeNumberWidth}%
  \addtolength{\R@cipeTitleWidth}{-\R@cipeServingsWidth}%
  \setlength{\R@cipeTandSWidth}{\R@cipeServingsWidth}%
  \addtolength{\R@cipeTandSWidth}{\R@cipeTitleWidth}%
  \RecipeMethodWidths{\R@cipeIngredientWidth}{\R@cipeQuantityWidth}%
                     {\R@cipeUnitsWidth}%
}
%
% default values:
\RecipeTitleWidths{0.8cm}{3cm}
\RecipeMethodWidths{4.5cm}{1cm}{2.5cm}
\setlength{\R@cipeTitleVerticalAdjustTop}{-0.25cm}
\setlength{\R@cipeTitleVerticalAdjustBot}{-0.04cm}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Boxes
\newsavebox{\m@thodbox}
\newsavebox{\m@thodtempbox}
\newsavebox{\m@thodqtybox}
\newsavebox{\m@thoddetailbox}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Options 
%
% nonumber - Should recipes be numbered?               Default - yes
\DeclareOption{number}{\numb@ringtrue}
\DeclareOption{nonumber}{\numb@ringfalse}
%
% index    - Should recipes be indexed to a file?      Default - no
\DeclareOption{index}{\ind@xingtrue}
\DeclareOption{noindex}{\ind@xingfalse}
%
% Process the options, using defaults
\ExecuteOptions{number,noindex}
\ProcessOptions\relax
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The ingredient/method macros
%
%   \DeclareRobustCommand{\r@cipeempty}{}
%
%  What happens at the start of ingredients (= end of method)
\DeclareRobustCommand{\pr@ingred}{%
  \endminipage\endlrbox%
  % Here we compare the width of the \m@thoddetailbox with zero to determine
  % whether anything was entered into it.
  \ifdim\wd\m@thoddetailbox=0in
    \h@smethodtextfalse%
     \PackageWarning{cuisine}{FALSE}
  \else%
    \h@smethodtexttrue%
     \PackageWarning{cuisine}{TRUE}
  \fi%
\usebox{\m@thoddetailbox}
%
}%
%  And at the end of ingredients (= start of method)
\DeclareRobustCommand{\p@stingred}{%
  \lrbox{\m@thoddetailbox}\minipage{\R@cipeMethodWidth}%
  \noindent%    might be sensible...
  \ignorespaces%
}%
%
%  The \m@thodend command (which is \\ in the environment)
\DeclareRobustCommand{\m@thodend}{%
  \ifnum\value{m@thodnumber}=0%
    % don't need to do much here...
  \else%
    \pr@ingred%
    % 
  \fi%
%  \ifnum\value{ingr@dnumber}=0%
%  \else%
%  \fi%
  \stepcounter{m@thodnumber}%
  \makebox[\textwidth]{%
    \makebox[\R@cipeNumberWidth][c]{\arabic{r@cipenumber}}%
    \show{\m@thodbox}%
  }%
  \savebox{\m@thodbox}[\R@cipeQandUWidth]{}%
  \p@stingred%
}%
%
%
%  The \ingredient command
\DeclareRobustCommand{\ingredient}[3][]{%
  \ifnum\value{m@thodnumber}=0%
    % don't need to do much here...
  \else%
    \pr@ingred%
    % 
  \fi%
  \ifnum\value{ingr@dnumber}=0%
    % don't need to do much here...
  \else%
    % process the previous method section, if there was one...
    %
    % first: is m@thoddetailbox empty?
  \fi%
%
  \stepcounter{ingr@dnumber}%
%
% WAS:
% hack to see if #1 is empty - is there a better way? 
%  \def\@Raaa{z}\def\@Rbbb{z#1}%
%  \ifx\@Raaa\@Rbbb%
% NOW:  (Patrick Guio, comp.text.tex)
  \ifx\relax#1\relax%
    \savebox{\m@thodqtybox}[\R@cipeQandUWidth]{%
      \parbox[t]{\R@cipeQandUWidth}{#2}%
    }%
  \else
    \savebox{\m@thodqtybox}[\R@cipeQandUWidth]{%
      \parbox[b]{\R@cipeQuantityWidth}{\hfill #1\rule{0.06cm}{0cm}}%
      \parbox[t]{\R@cipeUnitsWidth}{#2\hfill}%
    }%
  \fi%
  \savebox{\m@thodtempbox}{\usebox{\m@thodbox}}%
  \savebox{\m@thodbox}[\R@cipeQandUWidth]{%
    \parbox[t]{\R@cipeQandUWidth}{%
      \usebox{\m@thodtempbox}\par%
      \strut\usebox{\m@thodqtybox}%
    }%
  }%
%  \usebox{\m@thodbox}    % For testing: show cumulative boxes
%
  \p@stingred%
}%
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The recipe environment
%   #1 = title, #2 = portions, #3 = preparation time
\newenvironment{recipe}[3]{%
  % These are the things that are put at the start of recipes:
  %
  % -- set-up things
  \stepcounter{r@cipenumber}
  \let\\\m@thodend
  \setlength{\R@cipeTempParindent}{\parindent}
  \setlength{\parindent}{0pt}
  \savebox{\m@thodbox}[\R@cipeQandUWidth]{}
  \savebox{\m@thoddetailbox}[\R@cipeMethodWidth]{}
  %
  % -- and the actual displayed title

  \bigskip
  \pagebreak[0]
  % ---- line 1
  \mbox{%
    \ifnumb@ring%
      \makebox[\R@cipeNumberWidth][c]{\arabic{r@cipenumber}}%
      \parbox[b]{\R@cipeTitleWidth}{#1}%
    \else%
      \parbox[b]{\R@cipeTitleWidth}{#1}%
      \makebox[\R@cipeNumberWidth]{}%
    \fi%
    \parbox[b]{\R@cipeServingsWidth}{\hfill #2}%
  }\par%
  \nopagebreak    % we don't want page breaks during the title
  %
  %  (NOTE: I want to get the recipe number aligned with the TOP of the title
  %   in the case of multi-line titles, but I can seem to get it to work.  Why?)
  %
  % ---- rule
  \vspace{\R@cipeTitleVerticalAdjustTop}%
  \nopagebreak
  \rule{\textwidth}{0.4pt}\par%
  \nopagebreak
  \vspace{\R@cipeTitleVerticalAdjustBot}%
  \nopagebreak
  %
  % ---- line 2
  \makebox[\textwidth][r]{#3}\par%
  \nopagebreak
  %
  %
%  \p@stingred%
}%
{%%%%%%%%%%
  % And these are the things put at the end of recipes:  
  \ifnum\value{m@thodnumber}=0%  then complain!
    \PackageWarning{cuisine}{The recipe did not have any method details}
  \else%
    \pr@ingred%
  \fi%
  %
  % -- tidying up
  \bigskip
  \setlength{\parindent}{\R@cipeTempParindent}
  % Undo \let\\  -- but this seems to be handled automatically by LaTeX
}%
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Miscellaneous useful macros
%
% degrees        - to typeset a degrees symbol
\DeclareRobustCommand{\degrees}{%
  ${}^\circ$%
}
%
% fr             - to typeset fractions, currently using package nicefrac
\DeclareRobustCommand{\fr}[2]{%
  \nicefrac#1#2%
}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% That's it...
%
\endinput
%
% END OF FILE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
