%\iffalse        This is file `cuisine.dtx'
%%
%% Recipe typesetting package `cuisine' by Ben Cohen.
% 
%  $Id$
% ------------------------------------------------ 
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{cuisine}
\GetFileInfo{cuisine.sty} % defines \filename, \filedate, \fileversion, 
                          % \fileinfo from cuisine.sty
\begin{document}
  \def\myemailaddress{\texttt{benc@cus.org.uk}}
  \title{The \texttt{cuisine} package}
  \author{Ben Cohen\thanks{My e-mail address is \myemailaddress.}}
  \date{Version \fileversion, \filedate}
  \maketitle
  \DocInput{cuisine.dtx}
\end{document}
%</driver> 
%\fi
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \CheckSum{1} 
% \changes{v0.5}{2000/06/26}{First Version}
%
% \begin{abstract}
% This package provides an environment for typesetting recipes with the
% ingredients down the left of the page next to their respective method steps.
% \end{abstract}
% 
% \MakeShortVerb{\|}
% \section{Introduction}
% There appear to be two styles of typesetting recipes in general use.  The
% more common (at least in recipe books in the UK)
% is where the ingredients appear at the top above the method, 
% like in the recipe class (|macros/latex/contrib/other/recipe|). Another
% way is to have each ingredient next to the method step it appears in, like
% the cooking package (|macros/latex/contrib/supported/cooking|); 
% the cuisine package also uses this style, but closer to the format in 
% \textit{Practical Professional Cookery} by H.~L.\ Cracknell and R.~J.\
% Kaufmann.
%
% \section{Usage}
% The package is loaded using the header |\usepackage{cuisine}|.  The options
% are:
% \begin{enumerate}
% \item{|number|}Recipes will be numbered sequentially.  (This is the
% default.)
% \item{|nonumber|}Recipes will not be numbered.
% \item{|index|}Recipe titles will be written to the contents for the
% document.
% \item{|noindex|}Recipe titles will not be written to the document contents.
% (This is the default.)
% \end{enumerate}
% 
% \medskip
% \DescribeEnvironment{recipe}
% Each recipe is set out in a |recipe| environment.  The three
% parameters are the title, and two recipe description fields---typically they
% might be used for the number of servings and the preparation time.
% 
% \medskip
% \DescribeMacro{\ingredient}
% \DescribeMacro{\ing}
% Within the environment, you type method details in directly, and you
% type the ingredients using |\ingredient| or the shorter version |\ing|
% \textit{before} the method step beside which you want the ingredient to
% appear.  A new method step is started whenever an |\ingredient| appears
% after there has been method text.  Two consecutive |\ingredient|
% declarations will appear next to the same method step.
%
% The |\ingredient| command is used as follows:
% \begin{quote}
%   |\ingredient{|\textit{Quantity}|}%
%               {|\textit{Ingredient}|}|
% \end{quote}
% There is an optional first parameter which allows you to separate the 
% numerical quantity from the name of the unit of measurement:
% \begin{quote}
%   |\ingredient[|\textit{Numerical quantity}|]%
%               {|\textit{Unit of measurement}|}%
%               {|\textit{Ingredient}|}|
% \end{quote}
% Examples include:
% \begin{quote}
%   |\ingredient{a pinch}{salt}|\\
%   |\ingredient[4]{oz}{sugar}|
% \end{quote}
%
% \medskip
% \DescribeMacro{\fr}
% Within the recipe you can use |\fr| to typeset fractions using
% |\fr12| to get \fr@ction12, or |\fr{11}{12}| to typeset \fr@ction{11}{12}.
% (If the numerator or denominator of the fraction is more than one digit long
% then you will need to enclose it in braces.)
% 
% \DescribeMacro{\degrees}
% \DescribeMacro{\0}
% A degree symbol can be obtained using |\degrees| or the shorter form |\0|,
% for example |120\0| gives 120\d@grees.
% 
% \section{More advanced usage}
% \DescribeMacro{\nextstep}
% To force a new step if you do not want to declare any ingredients, use the
% |\nextstep| command.  (A second |\nextstep| command with no ingredient or
% method text before it will be ignored to prevent empty method steps from
% appearing.)
%
% \medskip
% \DescribeMacro{\freeform}
% To typeset text across the whole width of the recipe instead of just the
% width of the method, use the |\freeform| command.  This is equivalent to 
% |\noalign| in tables.
% 
% \medskip
% \DescribeMacro{\RecipeWidths}
% The |cuisine| package has been designed so that it is easy to vary the
% widths of the columns.  \LaTeX\ has very wide margins by default 
% so the text width is very narrow, which may be unsuitable for
% typesetting recipes using this package.  
% The |\RecipeWidths| command is designed to be used in conjunction with the
% \LaTeX\ commands for changing the page layout.  It is used as follows:
% \begin{quote}
%   |\RecipeWidths{|\textit{Total recipe width}|}%
%               {|\textit{Recipe number width}|}%
%               {|\textit{Number of servings width}|}%
%               {|\textit{Ingredient width}|}%
%               {|\textit{Quantity width}|}%
%               {|\textit{Units width}|}|}
% \end{quote}
%
% \medskip
% \DescribeMacro{\ResetRecipeCounter}
% The |\ResetRecipeCounter| command will reset the recipe counter so that 
% recipes are numbered from 1 again.
% 
% \section{Examples}
%
% \section{Bugs, Issues, Features, \dots}
% \begin{itemize}
% \item{Vertical spacing of the boxes:  the ingredients are not uniformly
% spaced and nor are the method steps.}
% \item{Test it, test it, and test again.}
% \end{itemize}
% Please e-mail me at \myemailaddress if you find any problems or can solve
% these ones.
% 
%
%
%
% Identification section
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{cuisine}[2000/04/11 v0.4 recipe typesetting]
%
% Use the nicefrac package for "nice" fractions...
\RequirePackage{nicefrac}
%
% ------------------------------------------------
% Variables and counters etc.
%
% r@cipenumber   - Recipe number counter
%                  This could be made dependent on, say, section.
\newcounter{r@cipenumber}
%
% command to reset it
\DeclareRobustCommand{\ResetRecipeCounter}{%
  \setcounter{r@cipenumber}{0}%
}
%
% st@pnumber   - Method counter (within recipes)
%                  It is zeroed whenever the recipe counter is incremented.
\newcounter{st@pnumber}[r@cipenumber]  
%
% ingr@dnumber   - Ingredient counter (within recipes)
%                  It is zeroed whenever the method counter is incremented.
\newcounter{ingr@dnumber}[st@pnumber]  
%
% ifnumb@ring    - Whether or not recipe numbers are printed 
%                  Method numbers will always be printed    
\newif\ifnumb@ring
%
% ifind@xing     - Whether writing the recipes to an index file or not
\newif\ifind@xing
%
% iffr@eforming  - Whether in freeform mode
\newif\iffr@eforming
%
% ifh@smethodtext - Whether the method body is empty or not
%\newif\ifh@smethodtext
%\h@smethodtextfalse
%
% And some dimensions:
%
% Total width
\newlength{\R@cipeWidth}
%
% Width of the recipe number box
\newlength{\R@cipeNumberWidth}
%
% Width of the recipe title box
\newlength{\R@cipeTitleWidth}
%
% Width of the recipe number-of-servings box
\newlength{\R@cipeServingsWidth}
%
% And the sum of the last two
\newlength{\R@cipeTandSWidth}
%
% Height of the recipe title to rule adjustments (usually negative)
\newlength{\R@cipeTitleVerticalAdjustTop}
\newlength{\R@cipeTitleVerticalAdjustBot}
%
% Width of the ingredient descriptors and combinations of them
\newlength{\R@cipeIngredientWidth}
\newlength{\R@cipeQuantityWidth}
\newlength{\R@cipeUnitsWidth}
\newlength{\R@cipeQandUWidth}
\newlength{\R@cipeIandUWidth}
\newlength{\R@cipeIQUWidth}
%
% Width of the method text
\newlength{\R@cipeMethodWidth}
%
% Width of everything but the number
\newlength{\R@cipeStepWidth}
%
% Temporary use
\newlength{\R@cipeTemp}
%
% Relevant definitions for setting the above values:
%
%   #1 is the ingredient width, #2 the quantity, #3 the units
%   others calculated
\DeclareRobustCommand*{\R@cipeMethodWidths}[3]{%
  \setlength{\R@cipeIngredientWidth}{#1}%
  \setlength{\R@cipeQuantityWidth}{#2}%
  \setlength{\R@cipeUnitsWidth}{#3}%
  \setlength{\R@cipeQandUWidth}{\R@cipeQuantityWidth}%
  \addtolength{\R@cipeQandUWidth}{\R@cipeUnitsWidth}%
  \setlength{\R@cipeIQUWidth}{\R@cipeQandUWidth}%
  \addtolength{\R@cipeIQUWidth}{\R@cipeIngredientWidth}%
  \addtolength{\R@cipeIQUWidth}{0.5cm}%
  \setlength{\R@cipeIandUWidth}{\R@cipeIQUWidth}%
  \addtolength{\R@cipeIandUWidth}{-\R@cipeQuantityWidth}%
  \setlength{\R@cipeStepWidth}{\R@cipeWidth}%
  \addtolength{\R@cipeStepWidth}{-\R@cipeNumberWidth}%
  \setlength{\R@cipeMethodWidth}{\R@cipeStepWidth}%
  \addtolength{\R@cipeMethodWidth}{-\R@cipeIngredientWidth}%
  \addtolength{\R@cipeMethodWidth}{-\R@cipeQandUWidth}%
% deal with the space between columns
  \addtolength{\R@cipeMethodWidth}{-0.5cm}%
}%
%
%   #1 is the recipe number width, #2 the number of servings
%   title width calculated, updates method widths too
\DeclareRobustCommand*{\R@cipeTitleWidths}[2]{%
  \setlength{\R@cipeNumberWidth}{#1}%
  \setlength{\R@cipeServingsWidth}{#2}%
  \setlength{\R@cipeTitleWidth}{\R@cipeWidth}%
  \addtolength{\R@cipeTitleWidth}{-\R@cipeNumberWidth}%
  \addtolength{\R@cipeTitleWidth}{-\R@cipeServingsWidth}%
  \setlength{\R@cipeTandSWidth}{\R@cipeServingsWidth}%
  \addtolength{\R@cipeTandSWidth}{\R@cipeTitleWidth}%
  \R@cipeMethodWidths{\R@cipeIngredientWidth}{\R@cipeQuantityWidth}%
                     {\R@cipeUnitsWidth}%
}
%
% Combines the above macros
% #1 recipe width, #2 recipe number, #3 number of servings, 
% #4 ingredient width, #5 quantity, #6 units
\DeclareRobustCommand*{\RecipeWidths}[6]{%
  \setlength{\R@cipeWidth}{#1}%
  \R@cipeTitleWidths{#2}{#3}%
  \R@cipeMethodWidths{#4}{#5}{#6}%
}%
%
% default values:  
%     These appear to be reasonable for the LaTeX default page layout.
%     (A4, portrait, one column, etc.)
%     I don't think the LaTeX default width is good for a recipe book though!
%\setlength{\R@cipeWidth}{\textwidth}
%\R@cipeTitleWidths{0.8cm}{3cm}
%\R@cipeMethodWidths{3.5cm}{1cm}{1.7cm}
\RecipeWidths{\textwidth}{0.8cm}{3cm}{3.5cm}{1cm}{1.7cm}
\setlength{\R@cipeTitleVerticalAdjustTop}{-0.25cm}
\setlength{\R@cipeTitleVerticalAdjustBot}{-0.04cm}
%
% ------------------------------------------------
% Boxes
\newsavebox{\m@thodbox}
\newsavebox{\m@thodtempbox}
\newsavebox{\m@thodqtybox}
\newsavebox{\st@pIQUbox}
\newsavebox{\st@pmethodbox}
%
% ------------------------------------------------
% Options 
%
% nonumber - Should recipes be numbered?               Default - yes
\DeclareOption{number}{\numb@ringtrue}
\DeclareOption{nonumber}{\numb@ringfalse}
%
% index    - Should recipes be indexed to a file?      Default - no
\DeclareOption{index}{\ind@xingtrue}
\DeclareOption{noindex}{\ind@xingfalse}
%
% Process the options, using defaults
\ExecuteOptions{number,noindex}
\ProcessOptions\relax
%
% ------------------------------------------------
% The ingredient/method macros
%
%  \DisplaySt@p -- Displays the ingredients and method for the current step
%                  and resets things
\DeclareRobustCommand{\Displ@ySt@p}{%
  \stepcounter{st@pnumber}%
% Put extra vertical space between steps.  But it isn't uniform yet.
  \vskip0.2cm%
% Display this step.
  \makebox[\R@cipeWidth]{%
    \makebox[\R@cipeNumberWidth][l]{\arabic{st@pnumber}}%
    \usebox{\m@thodbox}%
    \usebox{\st@pmethodbox}%
  }%
% Clear the step storage boxes.
  \savebox{\m@thodbox}[\R@cipeIQUWidth]{}
% The following is redundant and causes underful \hbox problems
%  \savebox{\st@pmethodbox}[\R@cipeMethodWidth]{}
%
}%
%
% Displays a free form description
\DeclareRobustCommand{\Fr@eFormStep}{%
  \vskip0.2cm%
  \makebox[\R@cipeWidth]{%
    \rule{\R@cipeNumberWidth}{0cm}\usebox{\st@pmethodbox}%
  }%
% Clear the step storage boxes.
  \savebox{\st@pmethodbox}[\R@cipeMethodWidth]{}%
}%
%
%  This calls the display routine, depending on whether we are freeforming 
%  or not.
\DeclareRobustCommand{\DisplaySt@p}{%
  \iffr@eforming%
    \Fr@eFormStep%
  \else%
    \Displ@ySt@p%
  \fi%
}%
%
%  Version of \sloppy which doesn't cause problems (with spaces in the 
%  definition!)
\def\r@cipesloppy{%
  \tolerance 9999%
  \emergencystretch 3em%
  \hfuzz.5pt%
  \vfuzz.5pt%
%  Also, this is not in \sloppy.  Avoid warning on underfull boxes.
%  This value may need to be adjusted...
  \hbadness 1500%   
}%
%
%  This happens at the start of ingredients (= end of method)
\DeclareRobustCommand{\pr@ingred}{%
  \endminipage\end{lrbox}%
% Here we compare the width of the \st@pmethodbox with zero to determine
% whether anything was entered into it.
%
% (Idea for determining whether box is empty, Donald Arseneau, comp.text.tex)
  \ifdim\wd\st@pmethodbox=0in%
%    \PackageWarning{cuisine}{No text}%  % use for testing
  \else%
%    \PackageWarning{cuisine}{Method text}%
    \DisplaySt@p%
  \fi%
}%
%  And at the end of ingredients (= start of method)
\DeclareRobustCommand{\p@stingred}{%
%
%  This is very odd.  Using \begin{lrbox}...\end{lrbox} isn't
%  supposed to work properly over an environment definition (and doesn't
%  seem to, either).  So we use \lrbox...\endlrbox.  But we want to nest
%  a \minipage inside this, which fails.  But it does work with 
%  \begin{lrbox}\minipage...\endminipage\end{lrbox}.  WHY????!!!
%
  \fr@eformingfalse%
  \begin{lrbox}{\st@pmethodbox}\minipage[t]{\R@cipeMethodWidth}%
  \noindent%
  \ignorespaces%
  \r@cipesloppy%
}%
%
%  The \m@thodend command (which is \nextstep in the environment)
\DeclareRobustCommand{\m@thodend}{%
% we want to *force* the new step unless there is no method AND no 
% ingredients
  \endminipage\end{lrbox}%
% fill in the method box in case there isn't one yet:
  \ifdim\wd\st@pmethodbox=0in%
    \ifnum\value{ingr@dnumber}>0%
      \savebox{\st@pmethodbox}[\R@cipeMethodWidth]{\mbox{}}%
      \DisplaySt@p%
    \fi%
  \else%  
    \DisplaySt@p%
  \fi%
  \p@stingred%
}%
%
%
%  For freeform text.  Like \noalign in tables.
\DeclareRobustCommand{\fr@eform}{%
% we want to *force* the new step unless there is no method AND no 
% ingredients  (as for \m@thodend)
  \endminipage\end{lrbox}%
% fill in the method box in case there isn't one yet:
  \ifdim\wd\st@pmethodbox=0in%
    \ifnum\value{ingr@dnumber}>0%
      \savebox{\st@pmethodbox}[\R@cipeMethodWidth]{\mbox{}}%
       \DisplaySt@p%
    \fi%
  \else%  
    \DisplaySt@p%
  \fi% 
% like \p@stingred
  \fr@eformingtrue% 
  \begin{lrbox}{\st@pmethodbox}\minipage[t]{\R@cipeStepWidth}%
  \noindent%
  \ignorespaces%
  \r@cipesloppy%
}%
%
%  The \ingredient command
\DeclareRobustCommand{\ingr@dient}[3][]{%
%\PackageWarning{cuisine}{(A)}%  for testing - but causes some problems too
  \pr@ingred%
%\PackageWarning{cuisine}{(B)}% 
%
% The following is the main bit to typeset the ingredients list.
% (Thanks to Ulrike Fischer, comp.text.tex, for help with aligning box 
%  baselines.)
%
% hack to see if #1 is empty (Patrick Guio, comp.text.tex)
  \ifx\relax#1\relax%
% if it is empty we typeset #2 in the whole QandU width:    
    \savebox{\st@pIQUbox}[\R@cipeIQUWidth]{%
      \parbox[t]{\R@cipeIQUWidth}{%
        \lineskip0pt\mbox{}\\[-\baselineskip]%
        \parbox[b]{\R@cipeQandUWidth}{\rule{0pt}{\baselineskip}#2}%
        \rule{0.2cm}{0cm}%
        \parbox[t]{\R@cipeIngredientWidth}{#3}%
      }%
    }%
  \else
% if #1 was not empty, typeset #1 and #2 separately:
    \savebox{\m@thodtempbox}[\R@cipeIandUWidth]{%
      \parbox[t]{\R@cipeIandUWidth}{%
        \lineskip0pt\mbox{}\\[-\baselineskip]%
        \parbox[b]{\R@cipeUnitsWidth}{\rule{0pt}{\baselineskip}#2\hfill}%
        \rule{0.2cm}{0cm}%
        \parbox[t]{\R@cipeIngredientWidth}{#3}%
      }%
    }% 
    \savebox{\st@pIQUbox}[\R@cipeIQUWidth]{%
      \parbox[t]{\R@cipeIQUWidth}{%
        \lineskip0pt\mbox{}\\[-\baselineskip]%
        \parbox[b]{\R@cipeQuantityWidth}{\rule{0pt}{\baselineskip}\hfill #1%
          \rule{0.1cm}{0cm}}%
        \usebox{\m@thodtempbox}%
      }%
    }%
  \fi%
%\PackageWarning{cuisine}{(C)}% 
% use \m@thodtempbox as a temporary holding box
  \savebox{\m@thodtempbox}{\usebox{\m@thodbox}}%
  \savebox{\m@thodbox}{%
    \begin{minipage}[t]{\R@cipeIQUWidth}%
        \ifnum\value{ingr@dnumber}>0%
          \usebox{\m@thodtempbox}\strut\par%
        \fi%
        \usebox{\st@pIQUbox}\strut%
    \end{minipage}%
  }%
%
%  \usebox{\m@thodbox}    % For testing: show cumulative boxes
  \stepcounter{ingr@dnumber}%
%\PackageWarning{cuisine}{(D)}% 
  \p@stingred%
%\PackageWarning{cuisine}{(E)}% 
}%
%
%  Recipe title code
\DeclareRobustCommand{\r@cipetitle}[3]{

  \bigskip
  \pagebreak[0]
% ---- line 1
  \mbox{%
    \ifnumb@ring%
      \makebox[\R@cipeNumberWidth][l]{\arabic{r@cipenumber}}%
      \parbox[b]{\R@cipeTitleWidth}{#1}%
    \else%
      \parbox[b]{\R@cipeTitleWidth}{#1}%
      \makebox[\R@cipeNumberWidth]{}%
    \fi%
    \parbox[b]{\R@cipeServingsWidth}{\hfill #2}%
  }\par%
% we don't want page breaks during the title
  \nopagebreak   
%
%  (NOTE: I want to get the recipe number aligned with the TOP of the title
%   in the case of multi-line titles, but I can seem to get it to work.  Why?)
%
% ---- rule
  \vspace{\R@cipeTitleVerticalAdjustTop}%
  \nopagebreak
  \rule{\R@cipeWidth}{0.4pt}\par%
  \nopagebreak
  \vspace{\R@cipeTitleVerticalAdjustBot}%
  \nopagebreak
%
% ---- line 2
  \makebox[\R@cipeWidth][r]{#3}\par%
  \nopagebreak
%
}%
%
% ------------------------------------------------
% The recipe environment
%   #1 = title, #2 = portions, #3 = preparation time
\newenvironment{recipe}[3]{%
% These are the things that are put at the start of recipes:
%
% -- set-up things
%  \sloppy % don't be too fussy about line-breaks (is this working?)
  \stepcounter{r@cipenumber}
  \let\nextstep\m@thodend
  \let\0\d@grees
  \let\degrees\d@grees
  \let\fr\fr@ction
  \let\ing\ingr@dient
  \let\ingredient\ingr@dient
  \let\freeform\fr@eform
  \setlength{\parindent}{0pt}
  \savebox{\m@thodbox}[\R@cipeIQUWidth]{}
  \savebox{\st@pmethodbox}[\R@cipeMethodWidth]{}
% -- deal with index entry
  \ifind@xing
     \addcontentsline{toc}{subsection}{#1}     
  \fi
%
% -- and the actual displayed title
  \r@cipetitle{#1}{#2}{#3}
%
  \p@stingred%
}%
{% 
% And these are the things put at the end of recipes:  
  \pr@ingred%
  \ifnum\value{st@pnumber}=0%  then complain!
    \PackageWarning{cuisine}{The recipe did not have any method details}%
  \else%
  \fi%
%
% -- tidying up
  \bigskip
%  \setlength{\parindent}{\R@cipeTempParindent} % not apparently necessary
% Undo \let\*  -- but this seems to be handled automatically by LaTeX
}%
%
%
%^^A ------------------------------------------------
% Miscellaneous useful macros
%
% degrees        - to typeset a degrees symbol
\DeclareRobustCommand{\d@grees}{%
  ${}^\circ$%
}%
%
% fr             - to typeset fractions, currently using package nicefrac
\DeclareRobustCommand{\fr@ction}[2]{%
  \nicefrac#1#2%
}%
%
%^^A ------------------------------------------------
% That's it...
%
\endinput%
% \Finale
%^^A END OF FILE
%^^A ------------------------------------------------
